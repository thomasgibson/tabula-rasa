
#include <petsc.h>
#include <stdbool.h>
#include <math.h>
#include <inttypes.h>
#include <Eigen/Dense>
#define restrict __restrict


#include <immintrin.h>

template <typename Derived>
 static inline void subkernel0_cell_to_00_cell_integral_otherwise (const Eigen::MatrixBase<Derived> &  A_ , const double *const restrict *restrict coords )
{
  {
    Eigen::MatrixBase<Derived> &  A  = const_cast<Eigen::MatrixBase<Derived> &>(A_);
    ;
    static const double  t0[12][1]  = {{0.0939061879708836}, 
    {0.0939061879708835}, 
    {0.0939061879708836}, 
    {0.841335916657949}, 
    {0.841335916657949}, 
    {0.841335916657947}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}};
    static const double  t1[12][1]  = {{-1.17683640610267e-14}, 
    {-1.38100526756034}, 
    {1.38100526756032}, 
    {0.0}, 
    {-1.69708773286416}, 
    {1.69708773286416}, 
    {-4.42025514853108}, 
    {4.42025514853107}, 
    {-4.88825318371873}, 
    {4.88825318371872}, 
    {-0.467998035187655}, 
    {0.467998035187638}};
    static const double  t2[12][1]  = {{-1.38100526756033}, 
    {0.0}, 
    {1.38100526756033}, 
    {-1.69708773286415}, 
    {1.27041282600778e-14}, 
    {1.69708773286417}, 
    {-4.88825318371872}, 
    {-0.467998035187648}, 
    {-4.42025514853108}, 
    {0.467998035187645}, 
    {4.42025514853107}, 
    {4.88825318371872}};
    double  t3  = (-1 * coords[0][0]);
    double  t4  = (t3 + coords[1][0]);
    double  t5  = (-1 * coords[0][1]);
    double  t6  = (t5 + coords[2][1]);
    double  t7  = (t3 + coords[2][0]);
    double  t8  = (t5 + coords[1][1]);
    double  t9  = ((t4 * t6) + (-1 * (t7 * t8)));
    double  t10  = (1 / t9);
    double  t11  = (t6 * t10);
    double  t12  = ((-1 * t8) * t10);
    double  t13  = ((-1 * t7) * t10);
    double  t14  = (t4 * t10);
    double  t15  = ((t11 * t12) + (t13 * t14));
    double  t16  = ((t12 * t12) + (t14 * t14));
    double  t17  = ((t11 * t11) + (t13 * t13));
    double  t18  = ((t12 * t11) + (t14 * t13));
    double  t19  = fabs(t9);
    static const double  t20[12]  = {0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187};
    
    for (int  ip  = 0; ip < 12; ip += 1)
    {
      double  t26[1] ;
      double  t27[1] ;
      double  t21  = (t20[ip] * t19);
      double  t22  = (t21 * t18);
      double  t23  = (t21 * t17);
      double  t24  = (t21 * t16);
      double  t25  = (t21 * t15);
      
      for (int  k  = 0; k < 1; k += 1)
      {
        t26[k] = (t2[ip][k] * t25) + (t1[ip][k] * t24);
        t27[k] = (t2[ip][k] * t23) + (t1[ip][k] * t22);
        
      }
      
      for (int  j  = 0; j < 1; j += 1)
      {
        
        for (int  k  = 0; k < 1; k += 1)
        {
          #pragma coffee expression
          A(j, k) += ((t21 * (t0[ip][j] * t0[ip][k])) + (t2[ip][j] * t27[k])) + (t1[ip][j] * t26[k]);
          
        }
        
      }
      
    }
    
  }
  
}

template <typename Derived>
 static inline void subkernel0_cell_to_01_cell_integral_otherwise (const Eigen::MatrixBase<Derived> &  A_ , const double *const restrict *restrict coords )
{
  {
    Eigen::MatrixBase<Derived> &  A  = const_cast<Eigen::MatrixBase<Derived> &>(A_);
    ;
    static const double  t0[12][1]  = {{0.0939061879708836}, 
    {0.0939061879708835}, 
    {0.0939061879708836}, 
    {0.841335916657949}, 
    {0.841335916657949}, 
    {0.841335916657947}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}};
    static const double  t1[12][1]  = {{-1.17683640610267e-14}, 
    {-1.38100526756034}, 
    {1.38100526756032}, 
    {0.0}, 
    {-1.69708773286416}, 
    {1.69708773286416}, 
    {-4.42025514853108}, 
    {4.42025514853107}, 
    {-4.88825318371873}, 
    {4.88825318371872}, 
    {-0.467998035187655}, 
    {0.467998035187638}};
    static const double  t2[12][1]  = {{-1.38100526756033}, 
    {0.0}, 
    {1.38100526756033}, 
    {-1.69708773286415}, 
    {1.27041282600778e-14}, 
    {1.69708773286417}, 
    {-4.88825318371872}, 
    {-0.467998035187648}, 
    {-4.42025514853108}, 
    {0.467998035187645}, 
    {4.42025514853107}, 
    {4.88825318371872}};
    static const double  t3[12][10]  = {{0.0463079953908666, 0.440268993398561, 0.0463079953908666, 0.402250914961474, -0.201125457480737, -0.0145210435563257, -0.0145210435563257, -0.201125457480737, 0.402250914961474}, 
    {0.0463079953908666, 0.0463079953908666, 0.440268993398561, -0.201125457480737, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.0145210435563257, -0.0145210435563257}, 
    {0.440268993398561, 0.0463079953908666, 0.0463079953908666, -0.0145210435563257, -0.0145210435563258, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.201125457480737}, 
    {0.0393516858174583, -0.0626737220523999, 0.0393516858174588, 0.283654926157929, -0.141827463078965, -0.0705102461991972, -0.0705102461991983, -0.141827463078964, 0.28365492615793}, 
    {0.0393516858174583, 0.0393516858174587, -0.0626737220523998, -0.141827463078965, 0.283654926157929, -0.141827463078964, 0.28365492615793, -0.0705102461991974, -0.070510246199198}, 
    {-0.0626737220524, 0.0393516858174587, 0.0393516858174587, -0.0705102461991977, -0.0705102461991979, 0.283654926157931, -0.141827463078966, 0.283654926157931, -0.141827463078965}, 
    {0.0411107284664351, -0.0261932265993555, 0.0114358260653798, 0.808488952668146, -0.0612852214487412, -0.0623880968176905, -0.00511703591602517, -0.127951879895303, 0.138446419692862}, 
    {0.0114358260653798, -0.0261932265993555, 0.0411107284664351, 0.138446419692862, -0.127951879895303, -0.00511703591602517, -0.0623880968176904, -0.0612852214487413, 0.808488952668146}, 
    {0.0411107284664351, 0.0114358260653798, -0.0261932265993555, -0.0612852214487413, 0.808488952668146, -0.127951879895303, 0.138446419692862, -0.0623880968176904, -0.00511703591602509}, 
    {-0.0261932265993555, 0.0114358260653798, 0.0411107284664351, -0.00511703591602513, -0.0623880968176904, 0.138446419692862, -0.127951879895303, 0.808488952668146, -0.0612852214487411}, 
    {0.0114358260653798, 0.0411107284664351, -0.0261932265993555, -0.127951879895303, 0.138446419692862, -0.0612852214487414, 0.808488952668146, -0.00511703591602515, -0.0623880968176904}, 
    {-0.0261932265993556, 0.0411107284664351, 0.0114358260653798, -0.0623880968176904, -0.00511703591602517, 0.808488952668146, -0.0612852214487413, 0.138446419692862, -0.127951879895303}};
    static const double  t4[12][10]  = {{-0.485931890194848, 3.44372756077941, 0.0, 1.20457074358532, -0.230167544593388, 0.17643452397502, 0.230167544593388, 2.21356001618601, -5.17135568677057}, 
    {-0.485931890194856, 0.485931890194854, 0.0, -2.44372756077941, 6.37592643035589, 2.44372756077942, -6.3759264303559, -0.0537330206183695, 0.053733020618371}, 
    {-3.44372756077941, 0.485931890194855, 0.0, -0.176434523975019, -0.230167544593387, -1.20457074358531, 0.230167544593387, 5.17135568677059, -2.21356001618603}, 
    {0.404638308746459, -0.118553234985829, 0.0, 2.25318217517853, -0.282847955477361, -0.556094442314379, 0.282847955477362, -1.40140119046319, 1.11531611670256}, 
    {0.404638308746458, -0.404638308746455, 0.0, 1.11855323498582, 1.13786605847598, -1.11855323498583, -1.13786605847598, -0.838942397791738, 0.838942397791736}, 
    {0.118553234985822, -0.404638308746455, 0.0, 0.556094442314372, -0.282847955477361, -2.25318217517854, 0.282847955477361, -1.11531611670255, 1.40140119046318}, 
    {-0.55982390175726, 0.740805831642526, 0.0, 3.93699695901727, -0.0962843375058807, 0.951256224701447, 0.0962843375058817, 1.74991003196699, -1.93089196185226}, 
    {0.492870367157915, 0.740805831642527, 0.0, 0.674175115836559, -0.201023373941062, -0.206177080648911, 0.201023373941063, -2.56560608012889, 1.33192988132845}, 
    {-0.559823901757264, -0.492870367157912, 0.0, 2.46932174262301, 2.60506707768882, 1.95093340590807, -2.60506707768882, 0.750232850760382, 0.302461418154795}, 
    {-0.74080583164253, -0.49287036715791, 0.0, 0.206177080648912, -0.201023373941063, -0.674175115836557, 0.201023373941063, -1.33192988132844, 2.56560608012888}, 
    {0.492870367157911, 0.559823901757265, 0.0, -1.95093340590807, 2.60506707768883, -2.46932174262301, -2.60506707768883, -0.302461418154793, -0.750232850760384}, 
    {-0.740805831642531, 0.559823901757265, 0.0, -0.951256224701449, -0.0962843375058807, -3.93699695901727, 0.0962843375058796, 1.93089196185227, -1.74991003196701}};
    static const double  t5[12][10]  = {{-0.485931890194856, 0.0, 0.485931890194858, 6.3759264303559, -2.44372756077943, -0.053733020618349, 0.05373302061837, 2.44372756077939, -6.37592643035587}, 
    {-0.485931890194856, 0.0, 3.44372756077941, -0.230167544593396, 1.20457074358531, 2.21356001618602, -5.17135568677057, 0.176434523975014, 0.230167544593396}, 
    {-3.44372756077942, 0.0, 0.485931890194859, -0.230167544593378, -0.176434523975038, 5.17135568677059, -2.21356001618602, -1.20457074358531, 0.230167544593392}, 
    {0.404638308746456, 0.0, -0.404638308746454, 1.13786605847598, 1.11855323498581, -0.838942397791732, 0.838942397791745, -1.11855323498585, -1.13786605847597}, 
    {0.404638308746455, 0.0, -0.118553234985828, -0.282847955477365, 2.25318217517853, -1.40140119046319, 1.11531611670258, -0.556094442314385, 0.282847955477369}, 
    {0.118553234985819, 0.0, -0.404638308746454, -0.28284795547736, 0.556094442314363, -1.11531611670255, 1.40140119046319, -2.25318217517854, 0.282847955477367}, 
    {-0.559823901757264, 0.0, -0.492870367157912, 2.60506707768883, 2.469321742623, 0.750232850760386, 0.302461418154809, 1.95093340590805, -2.60506707768881}, 
    {0.492870367157908, 0.0, 0.55982390175727, 2.60506707768883, -1.95093340590808, -0.302461418154777, -0.750232850760386, -2.46932174262302, -2.60506707768881}, 
    {-0.559823901757265, 0.0, 0.740805831642527, -0.0962843375058818, 3.93699695901726, 1.749910031967, -1.93089196185225, 0.951256224701441, 0.0962843375058896}, 
    {-0.740805831642534, 0.0, 0.55982390175727, -0.096284337505871, -0.951256224701466, 1.93089196185228, -1.749910031967, -3.93699695901728, 0.0962843375058846}, 
    {0.492870367157909, 0.0, 0.740805831642528, -0.201023373941074, 0.674175115836559, -2.56560608012889, 1.33192988132846, -0.206177080648917, 0.201023373941073}, 
    {-0.740805831642533, 0.0, -0.492870367157911, -0.201023373941066, 0.206177080648908, -1.33192988132844, 2.5656060801289, -0.674175115836561, 0.20102337394107}};
    double  t6  = (-1 * coords[0][1]);
    double  t7  = (t6 + coords[1][1]);
    double  t8  = (-1 * coords[0][0]);
    double  t9  = (t8 + coords[1][0]);
    double  t10  = (t6 + coords[2][1]);
    double  t11  = (t8 + coords[2][0]);
    double  t12  = ((t9 * t10) + (-1 * (t11 * t7)));
    double  t13  = (1 / t12);
    double  t14  = ((-1 * t7) * t13);
    double  t15  = (t10 * t13);
    double  t16  = (t9 * t13);
    double  t17  = ((-1 * t11) * t13);
    double  t18  = ((t14 * t15) + (t16 * t17));
    double  t19  = ((t14 * t14) + (t16 * t16));
    double  t20  = ((t15 * t15) + (t17 * t17));
    double  t21  = ((t15 * t14) + (t17 * t16));
    double  t22  = fabs(t12);
    static const double  t23[12]  = {0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187};
    
    for (int  ip  = 0; ip < 12; ip += 1)
    {
      double  t24  = (t23[ip] * t22);
      double  t25  = (t24 * t21);
      double  t26  = (t24 * t20);
      double  t27  = (t24 * t19);
      double  t28  = (t24 * t18);
      
      for (int  j  = 0; j < 1; j += 1)
      {
        double  t29  = ((t2[ip][j] * t28) + (t1[ip][j] * t27));
        double  t30  = ((t2[ip][j] * t26) + (t1[ip][j] * t25));
        double  t31  = (t0[ip][j] * t24);
        
        for (int  k  = 0; k < 9; k += 1)
        {
          #pragma coffee expression
          A(j, k) += ((t3[ip][k] * t31) + (t4[ip][k] * t30)) + (t5[ip][k] * t29);
          
        }
        
      }
      
    }
    
  }
  
}

template <typename Derived>
 static inline void subkernel0_cell_to_10_cell_integral_otherwise (const Eigen::MatrixBase<Derived> &  A_ , const double *const restrict *restrict coords )
{
  {
    Eigen::MatrixBase<Derived> &  A  = const_cast<Eigen::MatrixBase<Derived> &>(A_);
    ;
    static const double  t0[12][10]  = {{0.0463079953908666, 0.440268993398561, 0.0463079953908666, 0.402250914961474, -0.201125457480737, -0.0145210435563257, -0.0145210435563257, -0.201125457480737, 0.402250914961474}, 
    {0.0463079953908666, 0.0463079953908666, 0.440268993398561, -0.201125457480737, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.0145210435563257, -0.0145210435563257}, 
    {0.440268993398561, 0.0463079953908666, 0.0463079953908666, -0.0145210435563257, -0.0145210435563258, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.201125457480737}, 
    {0.0393516858174583, -0.0626737220523999, 0.0393516858174588, 0.283654926157929, -0.141827463078965, -0.0705102461991972, -0.0705102461991983, -0.141827463078964, 0.28365492615793}, 
    {0.0393516858174583, 0.0393516858174587, -0.0626737220523998, -0.141827463078965, 0.283654926157929, -0.141827463078964, 0.28365492615793, -0.0705102461991974, -0.070510246199198}, 
    {-0.0626737220524, 0.0393516858174587, 0.0393516858174587, -0.0705102461991977, -0.0705102461991979, 0.283654926157931, -0.141827463078966, 0.283654926157931, -0.141827463078965}, 
    {0.0411107284664351, -0.0261932265993555, 0.0114358260653798, 0.808488952668146, -0.0612852214487412, -0.0623880968176905, -0.00511703591602517, -0.127951879895303, 0.138446419692862}, 
    {0.0114358260653798, -0.0261932265993555, 0.0411107284664351, 0.138446419692862, -0.127951879895303, -0.00511703591602517, -0.0623880968176904, -0.0612852214487413, 0.808488952668146}, 
    {0.0411107284664351, 0.0114358260653798, -0.0261932265993555, -0.0612852214487413, 0.808488952668146, -0.127951879895303, 0.138446419692862, -0.0623880968176904, -0.00511703591602509}, 
    {-0.0261932265993555, 0.0114358260653798, 0.0411107284664351, -0.00511703591602513, -0.0623880968176904, 0.138446419692862, -0.127951879895303, 0.808488952668146, -0.0612852214487411}, 
    {0.0114358260653798, 0.0411107284664351, -0.0261932265993555, -0.127951879895303, 0.138446419692862, -0.0612852214487414, 0.808488952668146, -0.00511703591602515, -0.0623880968176904}, 
    {-0.0261932265993556, 0.0411107284664351, 0.0114358260653798, -0.0623880968176904, -0.00511703591602517, 0.808488952668146, -0.0612852214487413, 0.138446419692862, -0.127951879895303}};
    static const double  t1[12][10]  = {{-0.485931890194848, 3.44372756077941, 0.0, 1.20457074358532, -0.230167544593388, 0.17643452397502, 0.230167544593388, 2.21356001618601, -5.17135568677057}, 
    {-0.485931890194856, 0.485931890194854, 0.0, -2.44372756077941, 6.37592643035589, 2.44372756077942, -6.3759264303559, -0.0537330206183695, 0.053733020618371}, 
    {-3.44372756077941, 0.485931890194855, 0.0, -0.176434523975019, -0.230167544593387, -1.20457074358531, 0.230167544593387, 5.17135568677059, -2.21356001618603}, 
    {0.404638308746459, -0.118553234985829, 0.0, 2.25318217517853, -0.282847955477361, -0.556094442314379, 0.282847955477362, -1.40140119046319, 1.11531611670256}, 
    {0.404638308746458, -0.404638308746455, 0.0, 1.11855323498582, 1.13786605847598, -1.11855323498583, -1.13786605847598, -0.838942397791738, 0.838942397791736}, 
    {0.118553234985822, -0.404638308746455, 0.0, 0.556094442314372, -0.282847955477361, -2.25318217517854, 0.282847955477361, -1.11531611670255, 1.40140119046318}, 
    {-0.55982390175726, 0.740805831642526, 0.0, 3.93699695901727, -0.0962843375058807, 0.951256224701447, 0.0962843375058817, 1.74991003196699, -1.93089196185226}, 
    {0.492870367157915, 0.740805831642527, 0.0, 0.674175115836559, -0.201023373941062, -0.206177080648911, 0.201023373941063, -2.56560608012889, 1.33192988132845}, 
    {-0.559823901757264, -0.492870367157912, 0.0, 2.46932174262301, 2.60506707768882, 1.95093340590807, -2.60506707768882, 0.750232850760382, 0.302461418154795}, 
    {-0.74080583164253, -0.49287036715791, 0.0, 0.206177080648912, -0.201023373941063, -0.674175115836557, 0.201023373941063, -1.33192988132844, 2.56560608012888}, 
    {0.492870367157911, 0.559823901757265, 0.0, -1.95093340590807, 2.60506707768883, -2.46932174262301, -2.60506707768883, -0.302461418154793, -0.750232850760384}, 
    {-0.740805831642531, 0.559823901757265, 0.0, -0.951256224701449, -0.0962843375058807, -3.93699695901727, 0.0962843375058796, 1.93089196185227, -1.74991003196701}};
    static const double  t2[12][10]  = {{-0.485931890194856, 0.0, 0.485931890194858, 6.3759264303559, -2.44372756077943, -0.053733020618349, 0.05373302061837, 2.44372756077939, -6.37592643035587}, 
    {-0.485931890194856, 0.0, 3.44372756077941, -0.230167544593396, 1.20457074358531, 2.21356001618602, -5.17135568677057, 0.176434523975014, 0.230167544593396}, 
    {-3.44372756077942, 0.0, 0.485931890194859, -0.230167544593378, -0.176434523975038, 5.17135568677059, -2.21356001618602, -1.20457074358531, 0.230167544593392}, 
    {0.404638308746456, 0.0, -0.404638308746454, 1.13786605847598, 1.11855323498581, -0.838942397791732, 0.838942397791745, -1.11855323498585, -1.13786605847597}, 
    {0.404638308746455, 0.0, -0.118553234985828, -0.282847955477365, 2.25318217517853, -1.40140119046319, 1.11531611670258, -0.556094442314385, 0.282847955477369}, 
    {0.118553234985819, 0.0, -0.404638308746454, -0.28284795547736, 0.556094442314363, -1.11531611670255, 1.40140119046319, -2.25318217517854, 0.282847955477367}, 
    {-0.559823901757264, 0.0, -0.492870367157912, 2.60506707768883, 2.469321742623, 0.750232850760386, 0.302461418154809, 1.95093340590805, -2.60506707768881}, 
    {0.492870367157908, 0.0, 0.55982390175727, 2.60506707768883, -1.95093340590808, -0.302461418154777, -0.750232850760386, -2.46932174262302, -2.60506707768881}, 
    {-0.559823901757265, 0.0, 0.740805831642527, -0.0962843375058818, 3.93699695901726, 1.749910031967, -1.93089196185225, 0.951256224701441, 0.0962843375058896}, 
    {-0.740805831642534, 0.0, 0.55982390175727, -0.096284337505871, -0.951256224701466, 1.93089196185228, -1.749910031967, -3.93699695901728, 0.0962843375058846}, 
    {0.492870367157909, 0.0, 0.740805831642528, -0.201023373941074, 0.674175115836559, -2.56560608012889, 1.33192988132846, -0.206177080648917, 0.201023373941073}, 
    {-0.740805831642533, 0.0, -0.492870367157911, -0.201023373941066, 0.206177080648908, -1.33192988132844, 2.5656060801289, -0.674175115836561, 0.20102337394107}};
    static const double  t3[12][1]  = {{0.0939061879708836}, 
    {0.0939061879708835}, 
    {0.0939061879708836}, 
    {0.841335916657949}, 
    {0.841335916657949}, 
    {0.841335916657947}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}, 
    {0.283453533784293}};
    static const double  t4[12][1]  = {{-1.17683640610267e-14}, 
    {-1.38100526756034}, 
    {1.38100526756032}, 
    {0.0}, 
    {-1.69708773286416}, 
    {1.69708773286416}, 
    {-4.42025514853108}, 
    {4.42025514853107}, 
    {-4.88825318371873}, 
    {4.88825318371872}, 
    {-0.467998035187655}, 
    {0.467998035187638}};
    static const double  t5[12][1]  = {{-1.38100526756033}, 
    {0.0}, 
    {1.38100526756033}, 
    {-1.69708773286415}, 
    {1.27041282600778e-14}, 
    {1.69708773286417}, 
    {-4.88825318371872}, 
    {-0.467998035187648}, 
    {-4.42025514853108}, 
    {0.467998035187645}, 
    {4.42025514853107}, 
    {4.88825318371872}};
    double  t6  = (-1 * coords[0][1]);
    double  t7  = (t6 + coords[1][1]);
    double  t8  = (-1 * coords[0][0]);
    double  t9  = (t8 + coords[1][0]);
    double  t10  = (t6 + coords[2][1]);
    double  t11  = (t8 + coords[2][0]);
    double  t12  = ((t9 * t10) + (-1 * (t11 * t7)));
    double  t13  = (1 / t12);
    double  t14  = ((-1 * t7) * t13);
    double  t15  = (t10 * t13);
    double  t16  = (t9 * t13);
    double  t17  = ((-1 * t11) * t13);
    double  t18  = ((t14 * t15) + (t16 * t17));
    double  t19  = ((t14 * t14) + (t16 * t16));
    double  t20  = ((t15 * t15) + (t17 * t17));
    double  t21  = ((t15 * t14) + (t17 * t16));
    double  t22  = fabs(t12);
    static const double  t23[12]  = {0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187};
    
    for (int  ip  = 0; ip < 12; ip += 1)
    {
      double  t29[1] ;
      double  t30[1] ;
      double  t31[1] ;
      double  t24  = (t23[ip] * t22);
      double  t25  = (t24 * t21);
      double  t26  = (t24 * t20);
      double  t27  = (t24 * t19);
      double  t28  = (t24 * t18);
      
      for (int  k  = 0; k < 1; k += 1)
      {
        t29[k] = (t5[ip][k] * t28) + (t4[ip][k] * t27);
        t30[k] = (t5[ip][k] * t26) + (t4[ip][k] * t25);
        t31[k] = t3[ip][k] * t24;
        
      }
      
      for (int  j  = 0; j < 9; j += 1)
      {
        
        for (int  k  = 0; k < 1; k += 1)
        {
          #pragma coffee expression
          A(j, k) += ((t0[ip][j] * t31[k]) + (t1[ip][j] * t30[k])) + (t2[ip][j] * t29[k]);
          
        }
        
      }
      
    }
    
  }
  
}

template <typename Derived>
 static inline void subkernel0_cell_to_11_cell_integral_otherwise (const Eigen::MatrixBase<Derived> &  A_ , const double *const restrict *restrict coords )
{
  {
    Eigen::MatrixBase<Derived> &  A  = const_cast<Eigen::MatrixBase<Derived> &>(A_);
    ;
    static const double  t0[12][10]  = {{0.0463079953908666, 0.440268993398561, 0.0463079953908666, 0.402250914961474, -0.201125457480737, -0.0145210435563257, -0.0145210435563257, -0.201125457480737, 0.402250914961474}, 
    {0.0463079953908666, 0.0463079953908666, 0.440268993398561, -0.201125457480737, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.0145210435563257, -0.0145210435563257}, 
    {0.440268993398561, 0.0463079953908666, 0.0463079953908666, -0.0145210435563257, -0.0145210435563258, 0.402250914961474, -0.201125457480737, 0.402250914961474, -0.201125457480737}, 
    {0.0393516858174583, -0.0626737220523999, 0.0393516858174588, 0.283654926157929, -0.141827463078965, -0.0705102461991972, -0.0705102461991983, -0.141827463078964, 0.28365492615793}, 
    {0.0393516858174583, 0.0393516858174587, -0.0626737220523998, -0.141827463078965, 0.283654926157929, -0.141827463078964, 0.28365492615793, -0.0705102461991974, -0.070510246199198}, 
    {-0.0626737220524, 0.0393516858174587, 0.0393516858174587, -0.0705102461991977, -0.0705102461991979, 0.283654926157931, -0.141827463078966, 0.283654926157931, -0.141827463078965}, 
    {0.0411107284664351, -0.0261932265993555, 0.0114358260653798, 0.808488952668146, -0.0612852214487412, -0.0623880968176905, -0.00511703591602517, -0.127951879895303, 0.138446419692862}, 
    {0.0114358260653798, -0.0261932265993555, 0.0411107284664351, 0.138446419692862, -0.127951879895303, -0.00511703591602517, -0.0623880968176904, -0.0612852214487413, 0.808488952668146}, 
    {0.0411107284664351, 0.0114358260653798, -0.0261932265993555, -0.0612852214487413, 0.808488952668146, -0.127951879895303, 0.138446419692862, -0.0623880968176904, -0.00511703591602509}, 
    {-0.0261932265993555, 0.0114358260653798, 0.0411107284664351, -0.00511703591602513, -0.0623880968176904, 0.138446419692862, -0.127951879895303, 0.808488952668146, -0.0612852214487411}, 
    {0.0114358260653798, 0.0411107284664351, -0.0261932265993555, -0.127951879895303, 0.138446419692862, -0.0612852214487414, 0.808488952668146, -0.00511703591602515, -0.0623880968176904}, 
    {-0.0261932265993556, 0.0411107284664351, 0.0114358260653798, -0.0623880968176904, -0.00511703591602517, 0.808488952668146, -0.0612852214487413, 0.138446419692862, -0.127951879895303}};
    static const double  t1[12][10]  = {{-0.485931890194856, 0.0, 0.485931890194858, 6.3759264303559, -2.44372756077943, -0.053733020618349, 0.05373302061837, 2.44372756077939, -6.37592643035587}, 
    {-0.485931890194856, 0.0, 3.44372756077941, -0.230167544593396, 1.20457074358531, 2.21356001618602, -5.17135568677057, 0.176434523975014, 0.230167544593396}, 
    {-3.44372756077942, 0.0, 0.485931890194859, -0.230167544593378, -0.176434523975038, 5.17135568677059, -2.21356001618602, -1.20457074358531, 0.230167544593392}, 
    {0.404638308746456, 0.0, -0.404638308746454, 1.13786605847598, 1.11855323498581, -0.838942397791732, 0.838942397791745, -1.11855323498585, -1.13786605847597}, 
    {0.404638308746455, 0.0, -0.118553234985828, -0.282847955477365, 2.25318217517853, -1.40140119046319, 1.11531611670258, -0.556094442314385, 0.282847955477369}, 
    {0.118553234985819, 0.0, -0.404638308746454, -0.28284795547736, 0.556094442314363, -1.11531611670255, 1.40140119046319, -2.25318217517854, 0.282847955477367}, 
    {-0.559823901757264, 0.0, -0.492870367157912, 2.60506707768883, 2.469321742623, 0.750232850760386, 0.302461418154809, 1.95093340590805, -2.60506707768881}, 
    {0.492870367157908, 0.0, 0.55982390175727, 2.60506707768883, -1.95093340590808, -0.302461418154777, -0.750232850760386, -2.46932174262302, -2.60506707768881}, 
    {-0.559823901757265, 0.0, 0.740805831642527, -0.0962843375058818, 3.93699695901726, 1.749910031967, -1.93089196185225, 0.951256224701441, 0.0962843375058896}, 
    {-0.740805831642534, 0.0, 0.55982390175727, -0.096284337505871, -0.951256224701466, 1.93089196185228, -1.749910031967, -3.93699695901728, 0.0962843375058846}, 
    {0.492870367157909, 0.0, 0.740805831642528, -0.201023373941074, 0.674175115836559, -2.56560608012889, 1.33192988132846, -0.206177080648917, 0.201023373941073}, 
    {-0.740805831642533, 0.0, -0.492870367157911, -0.201023373941066, 0.206177080648908, -1.33192988132844, 2.5656060801289, -0.674175115836561, 0.20102337394107}};
    static const double  t2[12][10]  = {{-0.485931890194848, 3.44372756077941, 0.0, 1.20457074358532, -0.230167544593388, 0.17643452397502, 0.230167544593388, 2.21356001618601, -5.17135568677057}, 
    {-0.485931890194856, 0.485931890194854, 0.0, -2.44372756077941, 6.37592643035589, 2.44372756077942, -6.3759264303559, -0.0537330206183695, 0.053733020618371}, 
    {-3.44372756077941, 0.485931890194855, 0.0, -0.176434523975019, -0.230167544593387, -1.20457074358531, 0.230167544593387, 5.17135568677059, -2.21356001618603}, 
    {0.404638308746459, -0.118553234985829, 0.0, 2.25318217517853, -0.282847955477361, -0.556094442314379, 0.282847955477362, -1.40140119046319, 1.11531611670256}, 
    {0.404638308746458, -0.404638308746455, 0.0, 1.11855323498582, 1.13786605847598, -1.11855323498583, -1.13786605847598, -0.838942397791738, 0.838942397791736}, 
    {0.118553234985822, -0.404638308746455, 0.0, 0.556094442314372, -0.282847955477361, -2.25318217517854, 0.282847955477361, -1.11531611670255, 1.40140119046318}, 
    {-0.55982390175726, 0.740805831642526, 0.0, 3.93699695901727, -0.0962843375058807, 0.951256224701447, 0.0962843375058817, 1.74991003196699, -1.93089196185226}, 
    {0.492870367157915, 0.740805831642527, 0.0, 0.674175115836559, -0.201023373941062, -0.206177080648911, 0.201023373941063, -2.56560608012889, 1.33192988132845}, 
    {-0.559823901757264, -0.492870367157912, 0.0, 2.46932174262301, 2.60506707768882, 1.95093340590807, -2.60506707768882, 0.750232850760382, 0.302461418154795}, 
    {-0.74080583164253, -0.49287036715791, 0.0, 0.206177080648912, -0.201023373941063, -0.674175115836557, 0.201023373941063, -1.33192988132844, 2.56560608012888}, 
    {0.492870367157911, 0.559823901757265, 0.0, -1.95093340590807, 2.60506707768883, -2.46932174262301, -2.60506707768883, -0.302461418154793, -0.750232850760384}, 
    {-0.740805831642531, 0.559823901757265, 0.0, -0.951256224701449, -0.0962843375058807, -3.93699695901727, 0.0962843375058796, 1.93089196185227, -1.74991003196701}};
    double  t3  = (-1 * coords[0][0]);
    double  t4  = (t3 + coords[1][0]);
    double  t5  = (-1 * coords[0][1]);
    double  t6  = (t5 + coords[2][1]);
    double  t7  = (t3 + coords[2][0]);
    double  t8  = (t5 + coords[1][1]);
    double  t9  = ((t4 * t6) + (-1 * (t7 * t8)));
    double  t10  = (1 / t9);
    double  t11  = (t6 * t10);
    double  t12  = ((-1 * t8) * t10);
    double  t13  = ((-1 * t7) * t10);
    double  t14  = (t4 * t10);
    double  t15  = ((t11 * t12) + (t13 * t14));
    double  t16  = ((t12 * t12) + (t14 * t14));
    double  t17  = ((t11 * t11) + (t13 * t13));
    double  t18  = ((t12 * t11) + (t14 * t13));
    double  t19  = fabs(t9);
    static const double  t20[12]  = {0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187};
    
    for (int  ip  = 0; ip < 12; ip += 1)
    {
      double  t26[10] ;
      double  t27[10] ;
      double  t21  = (t20[ip] * t19);
      double  t22  = (t21 * t18);
      double  t23  = (t21 * t17);
      double  t24  = (t21 * t16);
      double  t25  = (t21 * t15);
      
      for (int  k  = 0; k < 9; k += 1)
      {
        t26[k] = (t2[ip][k] * t25) + (t1[ip][k] * t24);
        t27[k] = (t2[ip][k] * t23) + (t1[ip][k] * t22);
        
      }
      
      for (int  j  = 0; j < 9; j += 1)
      {
        double  t28  = (t0[ip][j] * t21);
        
        for (int  k  = 0; k < 9; k += 1)
        {
          #pragma coffee expression
          A(j, k) += ((t0[ip][k] * t28) + (t27[k] * t2[ip][j])) + (t26[k] * t1[ip][j]);
          
        }
        
      }
      
    }
    
  }
  
}

 static inline void compile_slate (double  A1[9][9] , double **  coords )
{
  /* Declare and initialize */
  Eigen::Matrix<double, 10, 10, Eigen::RowMajor>  T0 ;
  T0.setZero();
  /* Assemble local tensors */
  subkernel0_cell_to_00_cell_integral_otherwise(T0.block<1, 1>(0, 0), coords);
  subkernel0_cell_to_01_cell_integral_otherwise(T0.block<1, 9>(0, 1), coords);
  subkernel0_cell_to_10_cell_integral_otherwise(T0.block<9, 1>(1, 0), coords);
  subkernel0_cell_to_11_cell_integral_otherwise(T0.block<9, 9>(1, 1), coords);
  /* Map eigen tensor into C struct */
  Eigen::Map<Eigen::Matrix<double, 9, 9, Eigen::RowMajor> > T1((double *)A1);
  /* Linear algebra expression */
  T1 += ((T0).block<9, 9>(1, 1)) + (-((T0).block<9, 1>(1, 0)) * ((T0).block<1, 1>(0, 0)).inverse() * ((T0).block<1, 9>(0, 1)));
  
}
            

extern "C" {
struct MapMask {
    /* Row pointer */
    PetscSection section;
    /* Indices */
    const PetscInt *indices;
};
struct EntityMask {
    PetscSection section;
    const int64_t *bottom;
    const int64_t *top;
};
static PetscErrorCode apply_extruded_mask(PetscSection section,
                                          const PetscInt mask_indices[],
                                          const int64_t mask,
                                          const int facet_offset,
                                          const int nbits,
                                          const int value_offset,
                                          PetscInt map[])
{
    PetscErrorCode ierr;
    PetscInt dof, off;
    /* Shortcircuit for interior cells */
    if (!mask) return 0;
    for (int bit = 0; bit < nbits; bit++) {
        if (mask & (1L<<bit)) {
            ierr = PetscSectionGetDof(section, bit, &dof); CHKERRQ(ierr);
            ierr = PetscSectionGetOffset(section, bit, &off); CHKERRQ(ierr);
            for (int k = off; k < off + dof; k++) {
                map[mask_indices[k] + facet_offset] += value_offset;
            }
        }
    }
    return 0;
}
PetscErrorCode wrap_compile_slate(int start,
                      int end,
                      Mat arg0_0_, int32_t *arg0_0_map0_0, int32_t *arg0_0_map1_0, double *arg1_0, int32_t *arg1_0_map0_0
                      ) {
  PetscErrorCode ierr;
  Mat arg0_0_0 = arg0_0_;
  double *arg1_0_vec[3];
  for ( int n = start; n < end; n++ ) {
    int32_t i = (int32_t)n;
    arg1_0_vec[0] = arg1_0 + (arg1_0_map0_0[i * 3 + 0])* 2;
    arg1_0_vec[1] = arg1_0 + (arg1_0_map0_0[i * 3 + 1])* 2;
    arg1_0_vec[2] = arg1_0 + (arg1_0_map0_0[i * 3 + 2])* 2;
    double buffer_arg0_0[9][9]  = {{0.0}};
    compile_slate(buffer_arg0_0, arg1_0_vec);
                    {
    ierr = MatSetValuesLocal(arg0_0_0, 9, arg0_0_map0_0 + i * 9,
                                             9, arg0_0_map1_0 + i * 9,
                                             (const PetscScalar *)buffer_arg0_0,
                                             ADD_VALUES); CHKERRQ(ierr);
                    };
  }
  return 0;
}
}
        